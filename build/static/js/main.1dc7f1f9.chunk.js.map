{"version":3,"sources":["services/pyramid.js","pyramid.js","App.js","reportWebVitals.js","index.js"],"names":["parseUserInput","input","trim","split","map","row","n","getValue","top","copy","pyramid","JSON","parse","stringify","getMin","slice","length","min","path","p1","p2","shift","pop","splitPyramid","left","right","Math","Row","position","number","index","style","color","fontWeight","className","App","useState","setPyramid","pos","setPos","intv","setIntv","timer","newPos","setInterval","userInput","join","getFastest","clearInterval","useEffect","onClick","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dc7f1f9.chunk.js","sourcesContent":["export const parseUserInput = (input) => {\r\n    return input.trim().split('\\n').map(row => row.trim().split(' ').map(n => +n));\r\n}\r\n\r\nconst getValue = (top) => {\r\n    return top[0][0];\r\n};\r\n\r\nconst copy = (pyramid) => {\r\n    return JSON.parse(JSON.stringify(pyramid));\r\n};\r\n\r\nconst splitPyramid = (pyramid) => {\r\n    const p1 = copy(pyramid);\r\n    const p2 = copy(pyramid);\r\n\r\n    p1.shift();\r\n    p1.map(row => row.pop());\r\n\r\n    p2.shift();\r\n    p2.map(row => row.shift());\r\n\r\n    return [p1, p2];\r\n};\r\n\r\nconst getMin = (pyramid) => {\r\n    const top = getValue(pyramid.slice(0, 1));\r\n\r\n    if (pyramid.length === 1) {\r\n        return {\r\n            min: top,\r\n            path: []\r\n        };\r\n    }\r\n\r\n    const [p1, p2] = splitPyramid(pyramid);\r\n\r\n    if (p1.length === 1) {\r\n        const [left, right] = [getValue(p1), getValue(p2)];\r\n        return {\r\n            min: top + Math.min(left, right),\r\n            path: [left < right ? 'left' : 'right']\r\n        };\r\n    } else {\r\n        const [left, right] = [getMin(p1), getMin(p2)];\r\n        return {\r\n            min: top + Math.min(left.min, right.min),\r\n            path: left.min < right.min\r\n                ? ['left', ...left.path]\r\n                : ['right', ...right.path]\r\n        };\r\n    }\r\n};\r\n\r\nconst getMax = (pyramid) => {\r\n\r\n};\r\n\r\nexport const getFastest = (userInput) => {\r\n    const input = parseUserInput(userInput);\r\n    return {\r\n        ...getMin(input),\r\n        input\r\n    };\r\n};\r\n\r\nexport const getSlowest = (userInput) => {\r\n    return getMax(parseUserInput(userInput));\r\n};","export default `\r\n1\r\n5 3\r\n1 4 9\r\n7 8 5 1\r\n6 4 2 1 8\r\n7 1 7 9 2 4\r\n5 3 4 1 8 6 9\r\n9 7 1 2 5 7 6 5\r\n4 7 5 2 8 3 6 9 1\r\n8 2 3 7 9 2 1 5 4 3\r\n7 5 8 9 3 4 1 5 7 4 2\r\n9 9 7 6 8 1 2 7 6 9 4 3\r\n2 4 9 7 5 3 7 8 1 5 4 3 1\r\n7 6 8 5 4 8 9 3 2 1 4 7 8 9\r\n9 7 3 8 7 5 1 2 6 5 6 4 3 3 1\r\n`.trim().split('\\n');","import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { getFastest } from './services/pyramid';\r\nimport userInput from './pyramid';\r\n\r\nfunction Row (position, number, index) {\r\n  const selected = position === index;\r\n  const style = selected && {\r\n    color: 'blue',\r\n    fontWeight: 'bold'\r\n  } || {};\r\n  return (\r\n    <div className=\"number\" style={style}>\r\n      {number}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  const [pyramid, setPyramid] = useState(null);\r\n  const [pos, setPos] = useState(0);\r\n  const [intv, setIntv] = useState(null);\r\n\r\n  const click = () => {\r\n    if (intv) {\r\n      clearInterval(intv);\r\n      setIntv(null);\r\n    } else {\r\n      timer(pos);\r\n    }\r\n  };\r\n\r\n  const timer = (pos) => {\r\n    let newPos = pos;\r\n\r\n    setIntv(setInterval(() => {\r\n      newPos++;\r\n\r\n      if (newPos === userInput.length) {\r\n        newPos = 1;\r\n      }\r\n      setPos(newPos);\r\n\r\n      const input = userInput.slice(0, newPos).join('\\n');\r\n      setPyramid(getFastest(input));\r\n    }, 500));\r\n\r\n    return () => clearInterval(intv);\r\n  };\r\n\r\n  useEffect(() => timer(pos), []);\r\n\r\n  let position = 0;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {pyramid && (\r\n        <>\r\n          <button onClick={click}>{intv ? 'Pause' : 'Play'}</button>\r\n          <h1>{pyramid.min}</h1>\r\n          {pyramid.input.map((row, index) => {\r\n            if (index && pyramid.path[index - 1] === 'right') {\r\n              position++;\r\n            }\r\n\r\n            return (\r\n              <div className=\"row\">\r\n                {row.map(Row.bind(null, position))}\r\n              </div>\r\n            )\r\n          })}\r\n        </>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}